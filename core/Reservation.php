<?php
	/* Generated by Wixnit Class Builder 
	// May, 26/2020
	// Building class for Reservation
	*/

	class Reservation
	{
		public $Id = "";
		public $Created = 0;
		public $Property = "";
		public $Customer = "";
		public $Checkindate = 0;
		public $Checkoutdate = 0;
		public $Rooms = array();
		public $Total = 0;
		public $Discount = 0;
		public $Paidamount = 0;
		public $Children = 0;
		public $Adult = 0;
		public $Paid = false;
		public $Request = "";
		public $Bookingnumber = "";
		public $Activated = false;
		public $Checkedin =false;
		public $Checkedout = false;
		public $Period = 0;
		
		public $Noshow = 0;

        public $Status = 0;
        public $IsOverDue = false;
        public $UnconfirmedNoShow = 0;
        public $RefundPaymentCondition = '';
        public $isApprovedByPartnerAdmin = 0;
        public $IsOnline = false;


		public $Cancelable = false;

		function __construct($arg=null)
		{
			if ($arg != null)
			{
				$db = DB::GetDB();

				$res = $db->query("SELECT * FROM reservation WHERE reservationid='$arg'");

				if ($res->num_rows > 0)
				{
					$row = $res->fetch_assoc();
				
					$this->Id = $row['reservationid'];
					$this->Created = new WixDate($row['created']);
					$this->Property = new Property($row['property']);
					$this->Customer = new Customer($row['customer']);
					$this->Checkindate = new WixDate($row['checkindate']);
                    $this->Checkoutdate = new WixDate($row['checkoutdate']);
                    $this->Cancelable = Property::Cancelable($row['property']);
					$this->ReservationIsOverdue($row);
					$this->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));

                    $this->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($i = 0; $i < count($r); $i++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($this->Property->Databasename, $this->Property->DatabaseUser, $this->Property->DatabasePassword));
                        $ro->Room->Initialize($r[$i]->room);
                        $ro->Number = $r[$i]->number;
                        
                        array_push($this->Rooms, $ro);
                    }

					$this->Total = $row['total'];
					$this->Discount = $row['discount'];
					$this->Paidamount = $row['paidamount'];
					$this->Children = $row['children'];
					$this->Adult = $row['adult'];
					$this->Paid = Convert::ToBool($row['paid']);
					$this->Request = $row['request'];
					$this->Bookingnumber = $row['booking'];
					$this->Activated = Convert::ToBool($row['activated']);
                    $this->Checkedin = Convert::ToBool($row['checkedin']);
                    $this->Checkedout = Convert::ToBool($row['checkedout']);
                    $this->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                    $this->getRefundCondition($row);

					if((($this->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($this->Activated === false))
                    {
                        $this->Status = 3;
                    }
					else if(($this->Activated === true) && (($this->Checkoutdate->getValue() + (($this->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $this->Status = 1;
                    }
					else if((($this->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($this->Activated === true))
                    {
                        $this->Status = 2;
                    }
					$this->Period = (($this->Checkoutdate->getValue() - $this->Checkindate->getValue()) / ((60 * 60) * 24));
				}
			}
		}

		public function Save()
		{
			$db = DB::GetDB();

			$id = $this->Id;
			$created = time();
			$property = addslashes(is_a($this->Property, "Property") ? $this->Property->Id : $this->Property);
			$customer = addslashes(is_a($this->Customer, "Customer") ? $this->Customer->Id : $this->Customer);
			$checkindate = Convert::ToInt($this->Checkindate);
			$checkoutdate = Convert::ToInt($this->Checkoutdate);
			$rooms = addslashes(json_encode(is_a($this->Rooms, "Roomcategory") ? $this->Rooms->GetArray() : $this->Rooms));
			$total = floatval($this->Total);
			$discount = floatval($this->Discount);
			$paidamount = floatval($this->Paidamount);
			$children = Convert::ToInt($this->Children);
			$adult = Convert::ToInt($this->Adult);
			$paid = Convert::ToInt($this->Paid);
			$request = addslashes($this->Request);
			$booking = $this->Bookingnumber;
			$activated = Convert::ToInt($this->Activated);

			$checkedin = Convert::ToInt($this->Checkedin);
			$checkedout = Convert::ToInt($this->Checkedout);
			
			$noshow = Convert::ToInt($this->Noshow);

			if($booking == "")
            {
                $booking = strtoupper(Random::GenerateId(10));
                while($db->query("SELECT reservationid FROM reservation WHERE booking='$booking'")->num_rows > 0)
                {
                    $booking = strtoupper(Random::GenerateId(10));
                }
                $this->Bookingnumber = $booking;
            }

			if($res = $db->query("SELECT reservationid FROM reservation WHERE reservationid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE reservation SET property='$property',customer='$customer',checkindate='$checkindate',checkoutdate='$checkoutdate',rooms='$rooms',total='$total',discount='$discount',paidamount='$paidamount',children='$children',adult='$adult',paid='$paid',request='$request',booking='$booking',activated='$activated',checkedin='$checkedin',checkedout='$checkedout',noshow='$noshow' WHERE reservationid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT reservationid FROM reservation WHERE reservationid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO reservation(reservationid,created,property,customer,checkindate,checkoutdate,rooms,total,discount,paidamount,children,adult,paid,request,booking,activated,checkedin,checkedout,noshow) VALUES ('$id','$created','$property','$customer','$checkindate','$checkoutdate','$rooms','$total','$discount','$paidamount','$children','$adult','$paid','$request','$booking','$activated','$checkedin','$checkedout','$noshow')");
			}
		}

		public function Delete()
		{
			$db = DB::GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM reservation WHERE reservationid='$id'");

			//Deleting Associated Objects
			/*n			$this->Property->Delete();

			$this->Customer->Delete();

			$this->Rooms->Delete();
			*/
        }
        
        public function getRefundCondition($row)
        {
            if ($row['refundPaymentCondition'] != '')
            {
                $this->RefundPaymentCondition = json_decode($row['refundPaymentCondition']);

                // manage logged by
                if ($this->RefundPaymentCondition->loggedBy == 'adxc0')
                {
                    $this->RefundPaymentCondition->loggedBy = 'Admin';
                }
                else
                {
                    // get user info
                    $user = new User((new Subscriber));
                    $user->Initialize($this->RefundPaymentCondition->loggedBy);

                    // get name and surname
                    $name = $user->Name;
                    $surname = $user->Surname;

                    // add info
                    $this->RefundPaymentCondition->loggedBy = ucwords($surname . ' ' . $name);
                }
            }

            // load admin approval status
            $this->isApprovedByPartnerAdmin = $row['isApprovedByPartnerAdmin'];

            // load reservation mode
            $this->IsOnline = intval($row['isonline']) == 1 ? true : false;
        } 

		public static function Search($property, $term='')
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

            $id = is_a($property, "Property") ? $property->Id : $property;
            $Cancelable = Property::Cancelable($id);

			$res = $db->query("SELECT reservationid FROM reservation WHERE property='$id' AND (customer LIKE '%$term%' OR checkindate LIKE '%$term%' OR checkoutdate LIKE '%$term%' OR rooms LIKE '%$term%' OR total LIKE '%$term%' OR discount LIKE '%$term%' OR paid LIKE '%$term%' OR children LIKE '%$term%' OR adult LIKE '%$term%' OR paid LIKE '%$term%' OR request LIKE '%$term%')");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = $row['property'];
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkindate = $row['checkindate'];
                $ret[$i]->Checkoutdate = $row['checkoutdate'];
                $ret[$i]->Cancelable = $Cancelable;
                $ret[$i]->ReservationIsOverdue($row);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }

                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->getRefundCondition($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

		public static function Filter($term='', $field='reservationid')
		{
			$db = DB::GetDB();
			$ret = array();
            $i = 0;
            
            $property = $_REQUEST['property'];
            $Cancelable = Property::Cancelable($property);

			$res = $db->query("SELECT reservationid FROM reservation WHERE ".$field." ='$term' AND property = '$property'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = $row['property'];
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkindate = $row['checkindate'];
                $ret[$i]->Checkoutdate = $row['checkoutdate'];
                $ret[$i]->Cancelable = $Cancelable;
                $ret[$i]->ReservationIsOverdue($row);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->getRefundCondition($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

		public static function Order($field='id', $order='DESC')
		{
			$db = DB::GetDB();
			$ret = array();
            $i = 0;
            
            $property = $_REQUEST['property'];
            $Cancelable = Property::Cancelable($property);

			$res = $db->query("SELECT reservationid FROM reservation WHERE property = '$property' ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = $row['property'];
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkindate = $row['checkindate'];
                $ret[$i]->Checkoutdate = $row['checkoutdate'];
                $ret[$i]->Cancelable = $Cancelable;
                $ret[$i]->ReservationIsOverdue($row);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->getRefundCondition($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

		public static function All()
		{
			$db = DB::GetDB();
			$ret = array();
            $i = 0;
            
            $property = $_REQUEST['property'];
            $Cancelable = Property::Cancelable($property);

			$res = $db->query("SELECT * FROM reservation WHERE property = '$property' ORDER BY id desc");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Reservation();
				$ret[$i]->Id = $row['reservationid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Property = $row['property'];
				$ret[$i]->Customer = $row['customer'];
				$ret[$i]->Checkindate = $row['checkindate'];
				$ret[$i]->Checkoutdate = $row['checkoutdate'];
                $ret[$i]->Cancelable = $Cancelable;
                $ret[$i]->ReservationIsOverdue($row);
				$ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
				
				$ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
				
				$ret[$i]->Total = $row['total'];
				$ret[$i]->Discount = $row['discount'];
				$ret[$i]->Paidamount = $row['paidamount'];
				$ret[$i]->Children = $row['children'];
				$ret[$i]->Adult = $row['adult'];
				$ret[$i]->Paid = Convert::ToBool($row['paid']);
				$ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->getRefundCondition($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

        public static function ByBookingNUmber($booking)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;

            $property = $_REQUEST['property'];
            $Cancelable = Property::Cancelable($property);

            $res = $db->query("SELECT * FROM reservation WHERE booking='$booking' AND property = '$property'");
            if($res->num_rows > 0)
            {
                $row = $res->fetch_assoc();

                $ret = new Reservation();
                $ret->Id = $row['reservationid'];
                $ret->Created = new WixDate($row['created']);
                $ret->Property = new Property($row['property']);
                $ret->Customer = new CustomerByProperty($GLOBALS['subscriber']);
                $ret->Customer->Initialize($row['customer']);
                $ret->Checkindate = new WixDate($row['checkindate']);
                $ret->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret->Cancelable = $Cancelable;
                $ret->ReservationIsOverdue($row);
                $ret->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret->Property->Databasename, $ret->Property->DatabaseUser, $ret->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$i]->number;
                    
                    array_push($ret->Rooms, $ro);
                }
                
                $ret->Total = $row['total'];
                $ret->Discount = $row['discount'];
                $ret->Paidamount = $row['paidamount'];
                $ret->Children = $row['children'];
                $ret->Adult = $row['adult'];
                $ret->Paid = Convert::ToBool($row['paid']);
                $ret->Request = $row['request'];
                $ret->Bookingnumber = $row['booking'];
                $ret->Activated = Convert::ToBool($row['activated']);
                $ret->Checkedin = Convert::ToBool($row['checkedin']);
                $ret->Checkedout = Convert::ToBool($row['checkedout']);
                $ret->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret->getRefundCondition($row);

                if((($ret->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret->Activated === false))
                {
                    $ret->Status = 3;
                }
                else if(($ret->Activated === true) && (($ret->Checkoutdate->getValue() + (($ret->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret->Status = 1;
                }
                else if((($ret->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret->Activated === true))
                {
                    $ret->Status = 2;
                }
                $ret->Period = (($ret->Checkoutdate->getValue() - $ret->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function ByCustomer($customer)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($customer, "Customer") ? $customer->Id : $customer;

            if (isset($_REQUEST['property'])) :
                $property = $_REQUEST['property'];
                $Cancelable = Property::Cancelable($property);
            endif;

            $res = $db->query("SELECT * FROM reservation WHERE customer='$id' ORDER BY id DESC");
            
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new CustomerByProperty($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->Cancelable = isset($Cancelable) ? $Cancelable : Property::Cancelable($row['property']);
                $ret[$i]->ReservationIsOverdue($row);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->getRefundCondition($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        // can we show this reservation?
        private static function canShowReservation($row) : bool
        {
            // @var bool $canAdd
            $canAdd = false;

            // get date
            $dateTime = new DateTime((isset($_REQUEST['dueDate']) ? $_REQUEST['dueDate'] : ''));

            // created date
            //if (date('d/m/Y', $row['created']) == $dateTime->format('d/m/Y')) $canAdd = true;

            // check check in date
            if (date('m/d/Y', $row['checkindate']) == $dateTime->format('m/d/Y')) $canAdd = true;

            // can we continue
            if (isset($_REQUEST['dueDate']) && ($_REQUEST['dueDate'] == '' && $canAdd === false)) 
            {   
                // if (isset($_REQUEST['tab']) && $_REQUEST['tab'] == 'all') $canAdd = true;
            }

            // get last 30 days
            $last30Days = strtotime('today - 30 days');

            // manage range
            if (isset($_REQUEST['dueDate']) && isset($_REQUEST['dueDateTo']))
            {
                // can we add
                if ($canAdd === false)
                {
                    // only proceed if date range exists
                    if ($_REQUEST['dueDate'] != '' && $_REQUEST['dueDateTo'] != '')
                    {
                        // get date time 2
                        $dateTime2 = new DateTime(date('m/d/Y', $row['checkindate']));

                        // build time for range
                        $rangeTime = new DateTime($_REQUEST['dueDateTo']);

                        // check now
                        if ($dateTime2->getTimestamp() <= $rangeTime->getTimestamp()) $canAdd = true;
                    }
                    else
                    {
                        if (intval($row['checkindate']) >= $last30Days) $canAdd = true;
                    }
                }
            }

            // return bool
            return $canAdd;
        }

        public static function ByProperty($property)
        {
            $db = DB::GetDB();
            $ret = [];
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;
            $Cancelable = Property::Cancelable($id);

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' ORDER BY id desc");
            
            while(($row = $res->fetch_assoc()) != null)
            {
                try{

                     if (self::canShowReservation($row)) :

                        $ret[$i] = new Reservation();
                        $ret[$i]->Id = $row['reservationid'];
                        $ret[$i]->Created = new WixDate($row['created']);
                        $ret[$i]->Property = new Property($row['property']);
                        $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                        $ret[$i]->Customer->Initialize($row['customer']);
                        $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                        $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                        $ret[$i]->Cancelable = $Cancelable;
                        $ret[$i]->ReservationIsOverdue($row);
                        $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                    
                        $ret[$i]->Rooms = [];
                        $r = json_decode($row['rooms']);

                        for($j = 0; $j < count($r); $j++)
                        {
                            $ro = new stdClass();
                            $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                            $ro->Room->Initialize($r[$j]->room);
                            $ro->Number = $r[$j]->number;
                            
                            array_push($ret[$i]->Rooms, $ro);
                        }
                    
                        $ret[$i]->Total = $row['total'];
                        $ret[$i]->Discount = $row['discount'];
                        $ret[$i]->Paidamount = $row['paidamount'];
                        $ret[$i]->Children = $row['children'];
                        $ret[$i]->Adult = $row['adult'];
                        $ret[$i]->Paid = Convert::ToBool($row['paid']);
                        $ret[$i]->Request = $row['request'];
                        $ret[$i]->Bookingnumber = $row['booking'];
                        $ret[$i]->Activated = Convert::ToBool($row['activated']);
                        $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                        $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                        $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                        $ret[$i]->getRefundCondition($row);


                        if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                        {
                            $ret[$i]->Status = 3;
                        }
                        else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                        {
                            $ret[$i]->Status = 1;
                        }
                        else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                        {
                            $ret[$i]->Status = 2;
                        }
                        $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));

                        $i++;

                     endif;
                }
                    
                catch(Exception $e)
                {
                    
                }
                        
            }
            return $ret;
        }

        public static function Pending($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;
            $Cancelable = Property::Cancelable($id);

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0");
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->Cancelable = $Cancelable;
                $ret[$i]->ReservationIsOverdue($row);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0; 

                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
            
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->getRefundCondition($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function Abandoned($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;
            $Cancelable = Property::Cancelable($id);

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND (noshow=1 OR noshow=2) ORDER BY id desc");
            while(($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowReservation($row)) :

                    $ret[$i] = new Reservation();
                    $ret[$i]->Id = $row['reservationid'];
                    $ret[$i]->Created = new WixDate($row['created']);
                    $ret[$i]->Property = new Property($row['property']);
                    $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                    $ret[$i]->Customer->Initialize($row['customer']);
                    $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                    $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                    $ret[$i]->Cancelable = $Cancelable;
                    $ret[$i]->ReservationIsOverdue($row);
                    $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                    
                    $ret[$i]->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($j = 0; $j < count($r); $j++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                        $ro->Room->Initialize($r[$j]->room);
                        $ro->Number = $r[$j]->number;
                        
                        array_push($ret[$i]->Rooms, $ro);
                    }
                    
                    $ret[$i]->Total = $row['total'];
                    $ret[$i]->Discount = $row['discount'];
                    $ret[$i]->Paidamount = $row['paidamount'];
                    $ret[$i]->Children = $row['children'];
                    $ret[$i]->Adult = $row['adult'];
                    $ret[$i]->Paid = Convert::ToBool($row['paid']);
                    $ret[$i]->Request = $row['request'];
                    $ret[$i]->Bookingnumber = $row['booking'];
                    $ret[$i]->Activated = Convert::ToBool($row['activated']);
                    $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                    $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                    $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                    $ret[$i]->getRefundCondition($row);

                    if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                    {
                        $ret[$i]->Status = 3;
                    }
                    else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $ret[$i]->Status = 1;
                    }
                    else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                    {
                        $ret[$i]->Status = 2;
                    }
                    $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                    $i++;

                endif;
            }
            return $ret;
        }

        public static function DueToday($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;
            $Cancelable = Property::Cancelable($id);

            $start = strtotime(date("d/m/Y"));
            $stop = (($start) + ((60 * 60) * 24));

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0 AND (checkindate >= '$start' AND checkindate < '$stop')");
            while(($row = $res->fetch_assoc()) != null)
            {

                if (self::canShowReservation($row)) :

                    $ret[$i] = new Reservation();
                    $ret[$i]->Id = $row['reservationid'];
                    $ret[$i]->Created = new WixDate($row['created']);
                    $ret[$i]->Property = new Property($row['property']);
                    $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                    $ret[$i]->Customer->Initialize($row['customer']);
                    $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                    $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                    $ret[$i]->Cancelable = $Cancelable;
                    $ret[$i]->ReservationIsOverdue($row);
                    $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                    
                    $ret[$i]->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($j = 0; $j < count($r); $j++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                        $ro->Room->Initialize($r[$j]->room);
                        $ro->Number = $r[$j]->number;
                        
                        array_push($ret[$i]->Rooms, $ro);
                    }
                    
                    $ret[$i]->Total = $row['total'];
                    $ret[$i]->Discount = $row['discount'];
                    $ret[$i]->Paidamount = $row['paidamount'];
                    $ret[$i]->Children = $row['children'];
                    $ret[$i]->Adult = $row['adult'];
                    $ret[$i]->Paid = Convert::ToBool($row['paid']);
                    $ret[$i]->Request = $row['request'];
                    $ret[$i]->Bookingnumber = $row['booking'];
                    $ret[$i]->Activated = Convert::ToBool($row['activated']);
                    $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                    $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                    $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                    $ret[$i]->getRefundCondition($row);

                    if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                    {
                        $ret[$i]->Status = 3;
                    }
                    else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $ret[$i]->Status = 1;
                    }
                    else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                    {
                        $ret[$i]->Status = 2;
                    }
                    $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                    $i++;

                endif;
            }
            return $ret;
        }

        public static function DueTodayCount($property)
        {
            $db = DB::GetDB();
            $id = is_a($property, "Property") ? $property->Id : $property;
            $today = intval(strtotime(date("m/d/Y", time())));

            // @var number $dueToday
            $dueToday = 0;

            // make query
            $ret = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin = 0 AND noshow = 0");

            // can we continue
            if ($ret->num_rows > 0)
            {
                while (($row = $ret->fetch_assoc()) !== null)
                {
                    // get date
                    $checkInDate = intval(strtotime(date('m/d/Y', $row['checkindate'])));

                    // are we good ?
                    if ($checkInDate == $today) $dueToday++;
                }
            }

            // close db
            $db->close();

            // return count
            return $dueToday;
        }

        public static function PaidReservation($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;
            $Cancelable = Property::Cancelable($id);

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND paid=1 ORDER BY id desc");
            while(($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowReservation($row)) :

                    $ret[$i] = new Reservation();
                    $ret[$i]->Id = $row['reservationid'];
                    $ret[$i]->Created = new WixDate($row['created']);
                    $ret[$i]->Property = new Property($row['property']);
                    $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                    $ret[$i]->Customer->Initialize($row['customer']);
                    $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                    $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                    $ret[$i]->Cancelable = $Cancelable;
                    $ret[$i]->ReservationIsOverdue($row);
                    $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                    
                    $ret[$i]->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($j = 0; $j < count($r); $j++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                        $ro->Room->Initialize($r[$j]->room);
                        $ro->Number = $r[$j]->number;
                        
                        array_push($ret[$i]->Rooms, $ro);
                    }
                    
                    $ret[$i]->Total = $row['total'];
                    $ret[$i]->Discount = $row['discount'];
                    $ret[$i]->Paidamount = $row['paidamount'];
                    $ret[$i]->Children = $row['children'];
                    $ret[$i]->Adult = $row['adult'];
                    $ret[$i]->Paid = Convert::ToBool($row['paid']);
                    $ret[$i]->Request = $row['request'];
                    $ret[$i]->Bookingnumber = $row['booking'];
                    $ret[$i]->Activated = Convert::ToBool($row['activated']);
                    $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                    $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                    $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                    $ret[$i]->getRefundCondition($row);

                    if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                    {
                        $ret[$i]->Status = 3;
                    }
                    else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $ret[$i]->Status = 1;
                    }
                    else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                    {
                        $ret[$i]->Status = 2;
                    }
                    $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                    $i++;

                endif;
            }

            return $ret;
        }

        public static function UnpaidReservation($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;
            $Cancelable = Property::Cancelable($id);

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND paid=0 ORDER BY id desc");
            while(($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowReservation($row)) :

                    $ret[$i] = new Reservation();
                    $ret[$i]->Id = $row['reservationid'];
                    $ret[$i]->Created = new WixDate($row['created']);
                    $ret[$i]->Property = new Property($row['property']);
                    $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                    $ret[$i]->Customer->Initialize($row['customer']);
                    $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                    $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                    $ret[$i]->Cancelable = $Cancelable;
                    $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                    
                    $ret[$i]->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($j = 0; $j < count($r); $j++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                        $ro->Room->Initialize($r[$j]->room);
                        $ro->Number = $r[$j]->number;
                        
                        array_push($ret[$i]->Rooms, $ro);
                    }
                    
                    $ret[$i]->Total = $row['total'];
                    $ret[$i]->Discount = $row['discount'];
                    $ret[$i]->Paidamount = $row['paidamount'];
                    $ret[$i]->Children = $row['children'];
                    $ret[$i]->Adult = $row['adult'];
                    $ret[$i]->Paid = Convert::ToBool($row['paid']);
                    $ret[$i]->Request = $row['request'];
                    $ret[$i]->Bookingnumber = $row['booking'];
                    $ret[$i]->Activated = Convert::ToBool($row['activated']);
                    $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                    $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                    $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                    $ret[$i]->ReservationIsOverdue($row);
                    $ret[$i]->getRefundCondition($row);

                    if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                    {
                        $ret[$i]->Status = 3;
                    }
                    else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $ret[$i]->Status = 1;
                    }
                    else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                    {
                        $ret[$i]->Status = 2;
                    }
                    $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                    $i++;

                endif;
            }
            return $ret;
        }

        public static function get($property, $reservationid)
        {
            $db = DB::GetDB();
            $ret = new Reservation();
            $pid = is_a($property, "Property") ? $property->Id : $property;
            $Cancelable = Property::Cancelable($pid);

            $res = $db->query("SELECT * FROM reservation WHERE reservationid='$reservationid' AND property='$pid'");

            if($res->num_rows > 0)
            {
                $row = $res->fetch_assoc();

                $ret->Id = $row['reservationid'];
                $ret->Created = new WixDate($row['created']);
                $ret->Property = new Property($row['property']);
                $ret->Customer = new Customer($row['customer']);
                $ret->Checkindate = new WixDate($row['checkindate']);
                $ret->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret->Cancelable = $Cancelable;
                $ret->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;

                $ret->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret->Property->Databasename, $ret->Property->DatabaseUser, $ret->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret->Rooms, $ro);
                }


                $ret->Total = $row['total'];
                $ret->Discount = $row['discount'];
                $ret->Paidamount = $row['paidamount'];
                $ret->Children = $row['children'];
                $ret->Adult = $row['adult'];
                $ret->Paid = Convert::ToBool($row['paid']);
                $ret->Request = $row['request'];
                $ret->Bookingnumber = $row['booking'];
                $ret->Activated = Convert::ToBool($row['activated']);
                $ret->Checkedin = Convert::ToBool($row['checkedin']);
                $ret->Checkedout = Convert::ToBool($row['checkedout']);
                $ret->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret->ReservationIsOverdue($row);
                $ret->getRefundCondition($row);

                if((($ret->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret->Activated === false))
                {
                    $ret->Status = 3;
                }
                else if(($ret->Activated === true) && (($ret->Checkoutdate->getValue() + (($ret->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret->Status = 1;
                }
                else if((($ret->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret->Activated === true))
                {
                    $ret->Status = 2;
                }
                $ret->Period = (($ret->Checkoutdate->getValue() - $ret->Checkindate->getValue()) / ((60 * 60) * 24));
            }
            return $ret;
        }

        public static function ReservationCount($property)
        {
            $db = DB::GetDB();
            $id = is_a($property, "Property") ? $property->Id : $property;
            $res = $db->query("SELECT * FROM reservation WHERE property='$id'")->num_rows;
            return $res;
        }

        public function ReservationIsOverdue($row)
        {
            if ($row['checkedin'] == 0)
            {
                // @var number $checkInDate
                $checkInDate = strtotime(date('m/d/Y', $row['checkindate']));

                // get today
                $today = strtotime(date('m/d/Y', time()));

                // compare both dates
                if ($checkInDate == $today)
                {
                    // check property checkin rule

                    // use default
                    $hour = intval(date('H', time()));
                    $minutes = intval(date('m', time()));

                    // check period 
                    if (strtolower(date('a')) == 'pm')
                    {
                        if ($hour >= 12)
                        {
                            if ($minutes >= 1)
                            {
                                $this->IsOverDue = true;
                            }
                        }
                    }
                }
                else
                {
                    if ($today > $checkInDate)
                    {
                        $this->IsOverDue = true;
                    }
                }
            }
        }
    }
