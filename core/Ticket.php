<?php
	/* Generated by Wixnit Class Builder 
	// Jul, 01/2019
	// Building class for Ticket
	*/

	class Ticket
	{
		public $Id = "";
		public $Created = 0;
		public $Subject = "";
		public $Department = "";
		public $User = "";
		public $Ticket_number = "";
		public $Assigned = "";
		public $Status = false;
		public $Deleted = false;
		public $Body = "";
		public $File = "";
		public $Priority = 0;

		function __construct($arg=null)
		{
			if($arg != null)
			{
				$db = DB::GetDB();

				$res = $db->query("SELECT * FROM ticket WHERE ticketid='$arg'");

				if($res->num_rows > 0)
				{
					$row = $res->fetch_assoc();
				
					$this->Id = $row['ticketid'];
					$this->Created = new WixDate($row['created']);
					$this->Subject = $row['subject'];
					$this->Department = $row['department'];
					$this->User = $row['user'];
					$this->Ticket_number = $row['ticket_number'];
					$this->Assigned = $row['assigned'];
					$this->Status = Convert::ToBool($row['status']);
					$this->Deleted = Convert::ToBool($row['deleted']);
					$this->Body = $row['body'];
					$this->File = $row['file'];
					$this->Priority = $row['priority'];
				}
			}
		}

		public function Save()
		{
			$db = DB::GetDB();

			$id = $this->Id;
			$created = time();
			$subject = addslashes($this->Subject);
			$department = addslashes($this->Department);
			$user = is_a($this->User, "Customer") ? $this->User->Id : $this->User;
			$ticket_number = addslashes($this->Ticket_number);
			$assigned = addslashes($this->Assigned);
			$status = Convert::ToInt($this->Status);
			$deleted = Convert::ToInt($this->Deleted);
			$body = addslashes($this->Body);
			$file = addslashes($this->File);
			$priority = Convert::ToInt($this->Priority);

			if($res = $db->query("SELECT ticketid FROM ticket WHERE ticketid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE ticket SET subject='$subject',department='$department',user='$user',ticket_number='$ticket_number',assigned='$assigned',status='$status',deleted='$deleted',body='$body',file='$file',priority='$priority' WHERE ticketid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT ticketid FROM ticket WHERE ticketid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO ticket(ticketid,created,subject,department,user,ticket_number,assigned,status,deleted,body,file,priority) VALUES ('$id','$created','$subject','$department','$user','$ticket_number','$assigned','$status','$deleted','$body','$file','$priority')");
			}
		}

		public function Delete()
		{
			$db = DB::GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM ticket WHERE ticketid='$id'");
		}

		public static function Search($term='')
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT ticketid FROM ticket WHERE subject LIKE '%$term%' OR department LIKE '%$term%' OR type LIKE '%$term%' OR ticket_number LIKE '%$term%' OR assigned LIKE '%$term%' OR status LIKE '%$term%' OR deleted LIKE '%$term%' OR body LIKE '%$term%' OR file LIKE '%$term%' OR priority LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = $row['ticketid'];
				$i++;
			}
			return Ticket::GroupInitialize($ret);
		}

		public static function Filter($term='', $field='ticketid')
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT ticketid FROM ticket WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = $row['ticketid'];
				$i++;
			}
			return Ticket::GroupInitialize($ret);
		}

		public static function Order($field='id', $order='DESC')
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT ticketid FROM ticket ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = $row['ticketid'];
				$i++;
			}
			return Ticket::GroupInitialize($ret);
		}

		public static function GroupInitialize($array=null, $orderBy='id', $order='DESC')
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

			$query = "";

			if(is_array($array) === true)
			{
				if(count($array) == 0)
				{
					return $ret;
				}
				else
				{
					for($i = 0; $i < count($array); $i++)
					{
						if($query == "")
						{
							$query = " WHERE Ticketid='".$array[$i]."'";
						}
						else
						{
							$query .= " OR Ticketid ='".$array[$i]."'";
						}
					}
				}
			}
			$i = 0;
			$res = $db->query("SELECT * FROM ticket".$query." ORDER BY ".$orderBy." ".$order);
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Ticket();
				$ret[$i]->Id = $row['ticketid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Subject = $row['subject'];
				$ret[$i]->Department = $row['department'];
				$ret[$i]->User = $row['user'];
				$ret[$i]->Ticket_number = $row['ticket_number'];
				$ret[$i]->Assigned = $row['assigned'];
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Deleted = Convert::ToBool($row['deleted']);
				$ret[$i]->Body = $row['body'];
				$ret[$i]->File = $row['file'];
				$ret[$i]->Priority = $row['priority'];
				$i++;
			}
			return $ret;
		}

        //Extra defined methods

        public static function GetList($customer, $term='', $filter='*')
        {
            $id = is_a($customer, "Customer") ? $customer->Id : $customer;
            $ret = array();
            $i = 0;
            $db = DB::GetDB();

            if(($filter == "*") || ($filter == "all"))
            {
                $res = $db->query("SELECT ticketid FROM ticket WHERE (user='$id') AND (subject LIKE '%$term%' OR ticket_number LIKE '%$term%' OR body LIKE '%$term%')");
            }
            else
            {
                $res = $db->query("SELECT ticketid FROM ticket WHERE (user='$id') AND (status='$filter') AND (subject LIKE '%$term%' OR ticket_number LIKE '%$term%' OR body LIKE '%$term%')");
            }

            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = $row['ticketid'];
                $i++;
            }
            return Ticket::GroupInitialize($ret, "created");
        }

        public static function Count($customer, $filter='*')
        {
            $id = is_a($customer, "Customer") ? $customer->Id : $customer;
            $db = DB::GetDB();
            if($filter === 0)
            {
                $ret = $res = $db->query("SELECT ticketid FROM ticket WHERE user='$id'")->num_rows;
            }
            else
            {
                $ret = $res = $db->query("SELECT ticketid FROM ticket WHERE (user='$id') AND (status='$filter')")->num_rows;
            }
            return $ret;
        }
	}
